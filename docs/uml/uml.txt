@startuml
interface IMatchRepository{
+ GetByID(id : int) : MatchDTO?
+ GetMatches(tournamentID : int) : IList<MatchDTO>
+ Create(dto : MatchDTO) : int
+ SaveResults(dto : MatchDTO) : int
}

interface ITournamentRepository{
+ Load() : IList<TournamentDTO>
+ FilterTournamentsOnStatus(status : string) : IList<TournamentDTO>
+ GetByID(int id) : TournamentDTO?
+ Create(dto : TournamentDTO) : int
+ Update(dto : TournamentDTO) : int
+ Delete(id : int) : bool
}

interface IUserRepository{
+ GetByID(id : int) : AccountDTO?
+ Register(dto : AccountDTO) : bool
+ CheckIfEmailExists(email : string) : bool
}

interface IContestantRepository{
+ GetContestant(tournamentID : int, contestantID : int) : ContestantDTO?
+ GetContestants(tournamentID : int) : IList<ContestantDTO>
+ GetStandings(tournamentID : int) : IList<ContestantDTO>
+ Register(userID : int, tournamentID : int) : bool
+ Deregister(userID : int, tournamentID : int) : bool
+ SaveResults(tournamentID : int, winnerID : int, wins : int,\nloserID : int, losses : int) : void
}

interface ILoginRepository{
+ GetCredentials(email : string) : AccountDTO
}

abstract class BaseRepository{
+ BaseRepository(dbContext : DbContext)
# GetConnection() : MySqlConnection
# OpenConnection(connection : MySqlConnection) : void
# ExecuteNonQuery(command : MySqlCommand) : int
# ExecuteScalar(command : MySqlCommand) : object?
# ExecuteReader(command : MySqlCommand) : DataTable
}

class MatchRepository{
+ GetByID(id : int) : MatchDTO?
+ GetMatches(tournamentID : int) : IList<MatchDTO>
+ Create(dto : MatchDTO) : int
+ SaveResults(dto : MatchDTO) : int
- InstantiateDTO(row : DataRow) : MatchDTO
}

class TournamentRepository{
+ Load() : IList<TournamentDTO>
+ FilterTournamentsOnStatus(status : string) : IEnumerable<TournamentDTO>
+ GetByID(int id) : TournamentDTO?
+ Create(dto : TournamentDTO) : int
+ Update(dto : TournamentDTO) : int
+ Delete(id : int) : bool
- InstantiateDTO(row : DataRow) : TournamentDTO
}

class UserRepository{
+ GetByID(id : int) : AccountDTO?
+ Register(dto : AccountDTO) : bool
+ CheckIfEmailExists(email : string) : bool
}

class ContestantRepository{
+ GetContestant(tournamentID : int, contestantID : int) : ContestantDTO?
+ GetContestants(tournamentID : int) : IList<ContestantDTO>
+ GetStandings(tournamentID : int) : IList<ContestantDTO>
+ Register(userID : int, tournamentID : int) : bool
+ Deregister(userID : int, tournamentID : int) : bool
+ SaveResults(tournamentID : int, winnerID : int, wins : int,\nloserID : int, losses : int) : void
}

class LoginRepository{
+ GetCredentials(email : string) : AccountDTO?
}

MatchRepository ...|> IMatchRepository : implements
TournamentRepository ...|> ITournamentRepository  : implements
UserRepository ...|> IUserRepository : implements
ContestantRepository ...|> IContestantRepository : implements
LoginRepository ...|> ILoginRepository : implements

BaseRepository <|.. MatchRepository : inherits
BaseRepository <|.. UserRepository : inherits
BaseRepository <|.. ContestantRepository : inherits
BaseRepository <|.. LoginRepository : inherits
BaseRepository <|.. TournamentRepository : inherits

class Encryptor{
+ Encryptor()
+ Hash(password : string) : SaltKey
+ Verify(password : string, dbkey : string,\ndbsalt : string) : bool
- ConvertToString(value : byte[]) : string
- ConvertToByte(value : string) : byte[]
}

class SaltKey {
+ Salt { get; private set; } : string
+ Key { get; private set; } : string
+ SaltKey(salt : string, key : string)
}

Encryptor --> SaltKey

class SportAssigner {
- {static} sports : List<ISport?>
+ {static} SportAssigner()
+ Retrieve(index : int) : ISport?
+ Retrieve(name : string) : ISport?
+ GetObjects() : List<ISport?>
+ GetNames() : List<string>
}

class TournamentSystemAssigner{
- {static} systems: List<ITournamentSystem?>
+ {static} TournamentSystemAssigner()
+ Retrieve(index : int) : ITournamentSystem?
+ Retrieve(name : string) : ITournamentSystem?
+ GetObjects() : List<ITournamentSystem?>
+ GetNames() : List<string>
}

class Validate{
+ {static} AsString(input : string) : bool
+ {static} AsEnum<T>(input : string) : bool
+ {static} AsDouble{object : input) : bool
+ {static} AsInt(object : input) : bool
+ {static} AsModel(object : input) : IEnumerable<string>
}

abstract class BaseRegistry{
# ValidateModel(model : object) : void
# ValidateModel(model : object,\npregenerated : IEnumerable<string>) : void
- BuildError(errors : IEnumerable<string>) : string
}

class MatchRegistry{
- repository : IMatchRepository
+ MatchRegistry(repository : IMatchRepository)
+ GetByID(id : int) : Match?
+ GetMatches(tournamentID : int) : IList<Match>
+ GenerateMatches(tournament : Tournament,\ncontestants : IEnumerable<Contestant>) : bool
+ CheckCanGenerate(tournamentID : int,\nsystem : TournamentSystem) : bool
+ SaveMatch(match : Match) : bool
}

class TournamentRegistry{
- repository : ITournamentRepository
- tournaments : Dictionary<int, Tournament>
+ TournamentRegistry(repository : ITournamentRepository)
+ LoadTournaments() : void
+ GetAll(refresh : bool) : IList<Tournament>
+ GetByID(id : int) : Tournament
+ CreateTournament(tournament : Tournament) : bool
+ UpdateTournament(tournament : Tournament) : bool
+ DeleteTournament(id : int) : bool
+ GetActiveTournaments() : IEnumerable<Tournament>
- InstantiateTournament(dto : TournamentDTO) : Tournament
- InstantiateDTO(obj : Tournament) : TournamentDTO
- AddToDictionary(tournament : Tournament) : bool
- ValidateModel(Tournament model) : void
}

class UserRegistry{
- repository : IUserRepository
- encryptor : Encryptor
+ UserRegistry(repository : IUserRepository)
+ GetByID(id : int) : Account?
+ RegisterAccount(account Account) : bool
}

class ContestantRegistry{
- repository : IContestantRepository
+ ContestantRegistry(repository : IContestantRepository)
+ GetContestant(tournamentID : int, contestantID : int) : Contestant?
+ GetContestants(tournamentID : int) : IList<Contestant>
+ Register(userID : int, userType : string, tournamentID : int) : bool
+ Deregister(userID : int, tournamentID : int) : bool
+ SaveResults(tournamentID : int\nwinnerID : int, loserID : int) : bool
+ GetLeaderboard(tournamentID : int) : IList<Contestant>
- CalculateRankings(contestants : IList<Contestants>) : void
}

class LoginHandler{
- repository : ILoginRepository
- encryptor : Encryptor
+ LoginHandler(repository : ILoginRepository)
+ AuthenticateForm(creds : Credentials) : Account
+ AuthenticateWebsite(creds : Credentials) : Account
+ VerifyCredential(email : string, password : string) : Account
}

IMatchRepository <---- MatchRegistry 
IUserRepository <---- UserRegistry
IContestantRepository <---- ContestantRegistry  
ITournamentRepository <---- TournamentRegistry
ILoginRepository <---- LoginHandler

BaseRegistry <|.. MatchRegistry 
BaseRegistry <|.. TournamentRegistry 
BaseRegistry <|.. UserRegistry 
BaseRegistry <|.. ContestantRegistry 

LoginHandler --> Encryptor : reference
UserRegistry --> Encryptor : reference

BaseRepository --> DbContext 

enum TournamentStatus{
Planned,
Running,
Finished,
Cancelled
}

enum UserRoles{
Player,
Staff,
Administrator
}

enum TeamType{
Solo,
Team
}

class DbContext{
+ DbConnectionString { get; }
+ DbContext()
+ DbContext(server : string?, uid : string?,\ndatabase: string?, pwd : string?)
}

class Match{
+ ID { get; set; } : int
+ TournamentID { get; set; } : int
+ HomeID { get; set; } : int
+ HomeName { get; set; } : string?
+ HomeScore { get; set; } : int
+ AwayID { get; set; } : int
+ AwayName { get; set; } : string?
+ AwayScore { get; set; } : int
+ IsFinished { get; set; } : bool
+ GetWinner() : int
+ GetLoser() : int
}

class Tournament{
+ ID { get; set; } : int
+ Title { get; set; } : string?
+ Description { get; set; } : string?
+ Sport { get; set; } : ISport?
+ SportName { get => Sport!.Name; } : string
+ City { get; set; } : string?
+ Address { get; set; } : string?
+ MinContestants { get; set; } : int
+ MaxContestants { get; set; } : int
+ StartDate { get; set; } : DateTime
+ EndDate { get; set; } : DateTime
+ Status { get; set; } : TournamentStatus
+ System { get; set; } : ITournamentSystem
+ SystemName { get => System!.Name; } : string
+ Type { get; set; } : TeamType
+ CanStart(totalContestants : int) : bool
}

abstract class Person{
+ ID { get; set; } : int
+ Name { get; set; } : string?
+ SurName { get; set; } : string?
}

class Account{
+ Role { get; set; } : UserRole
+ Type { get; set; } : TeamType
+ Email { get; set; } : string?
+ Password { get; set; } : string?
+ Salt { get; set; } : string?
}

class Contestant {
+ TournamentID { get; set; } : int
+ Rank { get; set; } : int
+ Wins { get; set; } : int
+ Losses { get; set; } : int
+ CompareTo(other : Contestant?) : int
}

class Credentials {
+ Email { get; set; } : string?
+ Password { get; set; } : string?
}

interface ISport{
+ Name { get; } : string
+ Scoring { get; } : string
+ MaxScore { get; } : int
+ ScoreIsValid(object home, object away) : bool
+ ToString() : string
}

class Badminton{
+ Name { get; } : string
+ Scoring { get; } : string
+ MaxScoring { get; } : int
+ Badminton()
+ ScoreIsValid(object home, object away) : bool
+ ToString() : string
}

interface ITournamentSystem{
+ Name { get; } : string
+ CanGenerateMatches(matches : IEnumerable<Match>) : bool
+ GenerateMatches(tournamentID : int,\ncontestants : IEnumerable<Contestant>) : IEnumerable<MatchDTO>
}

class RoundRobin{
+ Name { get; }
+ RoundRobin()
+ CanGenerateMatches(matches : IEnumerable<Match>) : bool
+ GenerateMatches(tournamentID : int,\ncontestants : IEnumerable<Contestant>) : IEnumerable<MatchDTO>
}

class SingleElimination{
+ Name { get; }
+ SingleElimination()
+ CanGenerateMatches(matches : IEnumerable<Match>) : bool
+ GenerateMatches(tournamentID : int,\ncontestants : IEnumerable<Contestant>) : IEnumerable<MatchDTO>
}

MatchRegistry --> Match
TournamentRegistry --> Tournament
ContestantRegistry --> Contestant
UserRegistry --> Account
LoginHandler --> Credentials

Contestant --|> Person : inherits
Account --|> Person : inherits
Account ..> UserRoles
Account ..> TeamType
Tournament ..> TeamType

Tournament --> ISport
Tournament --> ITournamentSystem
SportAssigner --> ISport
TournamentSystemAssigner --> ITournamentSystem
Tournament ..> TournamentStatus
Contestant ..|> IComparable : implements

interface IComparable<T>{
}

BaseRegistry --> Validate
ContestantRegistry --> Validate
Validate <-- Badminton 
TournamentRegistry --> SportAssigner
TournamentRegistry --> TournamentSystemAssigner 

ISport <|.. Badminton : implements
ITournamentSystem <|.. RoundRobin : implements
ITournamentSystem <|.. SingleElimination: implements

TournamentDTO .. Tournament
note right on link
Object shares 
the same 
properties
end note

MatchDTO . Match 
note right on link
Object shares 
the same 
properties
end note

AccountDTO .. Account 
note left on link
Object shares
the same
properties
end note

ContestantDTO .. Contestant
note right on link
Object shares 
the same
properties
end note

ContestantRepository ..> ContestantDTO
TournamentRepository ..> TournamentDTO

ContestantDTO <.. ContestantRegistry
TournamentDTO <.. TournamentRegistry

IContestantRepository ..> ContestantDTO 
ITournamentRepository ..> TournamentDTO 

UserRepository ..> AccountDTO
ContestantRegistry --> Tournament

MatchRepository ..> MatchDTO
IMatchRepository ..> MatchDTO 
MatchDTO <.. MatchRegistry

ILoginRepository ..> AccountDTO 
IUserRepository ..> AccountDTO
AccountDTO <.. LoginHandler 
AccountDTO <.. UserRegistry
LoginRepository ..> AccountDTO 

ISport -[hidden]> TournamentStatus

@enduml