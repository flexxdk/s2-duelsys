@startuml

interface IMatchRepository{
+ GetByID(id : int) : MatchDTO?
+ GetMatches(tournamentID : int) : IList<MatchDTO>
+ Create(dto : MatchDTO) : int
+ SaveResults(dto : MatchDTO) : int
}

interface ITournamentRepository{
+ Load() : IList<TournamentDTO>
+ GetStandings(tournamentID : int) : IList<ContestantDTO>
+ FilterTournamentsOnStatus(status : string) : IList<TournamentDTO>
+ GetByID(int id) : TournamentDTO?
+ Create(dto : TournamentDTO) : int
+ Update(dto : TournamentDTO) : int
+ Delete(id : int) : bool
}

interface IUserRepository{
+ GetByID(id : int) : AccountDTO?
+ Register(dto : AccountDTO) : bool
+ CheckIfEmailExists(email : string) : bool
}

interface IContestantRepository{
+ GetContestant(tournamentID : int, contestantID : int) : ContestantDTO?
+ GetContestants(tournamentID : int) : IList<ContestantDTO>
+ Register(userID : int, tournamentID : int) : bool
+ Deregister(userID : int, tournamentID : int) : bool
+ GetTournament(tournamentID : int) : TournamentDTO?
+ SaveResults(tournamentID : int, winnerID : int, wins : int,\nloserID : int, losses : int) : void
}

interface ILoginRepository{
+ GetCredentials(email : string) : AccountDTO
}

abstract class BaseRepository{
+ BaseRepository(dbContext : DbContext)
# GetConnection() : MySqlConnection
# OpenConnection(connection : MySqlConnection) : void
# ExecuteNonQuery(command : MySqlCommand) : int
# ExecuteScalar(command : MySqlCommand) : object?
# ExecuteReader(command : MySqlCommand) : DataTable
}

class MatchRepository{
+ GetByID(id : int) : MatchDTO?
+ GetMatches(tournamentID : int) : IList<MatchDTO>
+ Create(dto : MatchDTO) : int
+ SaveResults(dto : MatchDTO) : int
- InstantiateDTO(row : DataRow) : MatchDTO
}

class TournamentRepository{
+ Load() : IList<TournamentDTO>
+ GetStandings(tournamentID : int) : IList<ContestantDTO>
+ FilterTournamentsOnStatus(status : string) : IEnumerable<TournamentDTO>
+ GetByID(int id) : TournamentDTO?
+ Create(dto : TournamentDTO) : int
+ Update(dto : TournamentDTO) : int
+ Delete(id : int) : bool
- InstantiateDTO(row : DataRow) : TournamentDTO
}

class UserRepository{
+ GetByID(id : int) : AccountDTO?
+ Register(dto : AccountDTO) : bool
+ CheckIfEmailExists(email : string) : bool
}

class ContestantRepository{
+ GetContestant(tournamentID : int, contestantID : int) : ContestantDTO?
+ GetContestants(tournamentID : int) : IList<ContestantDTO>
+ Register(userID : int, tournamentID : int) : bool
+ Deregister(userID : int, tournamentID : int) : bool
+ GetTournament(tournamentID : int) : TournamentDTO?
+ SaveResults(tournamentID : int, winnerID : int, wins : int,\nloserID : int, losses : int) : void
}

class LoginRepository{
+ GetCredentials(email : string) : AccountDTO?
}

MatchRepository ...|> IMatchRepository : implements
TournamentRepository ...|> ITournamentRepository  : implements
UserRepository ...|> IUserRepository : implements
ContestantRepository ...|> IContestantRepository : implements
LoginRepository ...|> ILoginRepository : implements

BaseRepository <|.. MatchRepository : inherits
BaseRepository <|.. UserRepository : inherits
BaseRepository <|.. ContestantRepository : inherits
BaseRepository <|.. LoginRepository : inherits
BaseRepository <|.. TournamentRepository : inherits

class Encryptor{
+ Encryptor()
+ Hash(password : string) : SaltKey
+ Verify(password : string, dbkey : string,\ndbsalt : string) : bool
- ConvertToString(value : byte[]) : string
- ConvertToByte(value : string) : byte[]
}

class SaltKey {
+ Salt { get; private set; } : string
+ Key { get; private set; } : string
+ SaltKey(salt : string, key : string)
}

Encryptor --> SaltKey

class MatchGenerator{
- repository : IMatchRepository
+ MatchGenerator(repository : IMatchRepository)
+ GenerateMatches(system : TournamentSystem,\ntournamentID : int contestants : IEnumerable<Contestant>)\n: IEnumerable<MatchDTO>
+ CheckCanGenerate(tournamentID : int,\nsystem : TournamentSystem) : bool
- RoundRobin(tournamentID : int,\ncontestants : IEnumerable<Contestant>) : IEnumerable<MatchDTO>
- RecursiveRoundRobin(start : int, tournamentID : int,\ncontestants : IEnumerable<Contestant>) : IEnumerable<MatchDTO>
- SingleElimination(tournamentID : int, contestants :\nIEnumerable<Contestant>) : IEnumerable<MatchDTO>
- CalculateNextPowerOfTwo(n : int) : int
}

class SportAssigner {
- {static} sports : List<ISport?>
+ {static} SportAssigner()
+ RetrieveSport(index : int) : ISport?
+ RetrieveSport(name : string) : ISport?
+ GetSports() : List<ISport?>
+ GetNames() : List<string>
}

class Validate{
+ {static} AsString(input : string) : bool
+ {static} AsEnum<T>(input : string) : bool
+ {static} AsDouble{object : input) : bool
+ {static} AsInt(object : input) : bool
+ {static} AsModel(object : input) : IEnumerable<string>
}

abstract class BaseRegistry{
# ValidateModel(model : object) : void
# ValidateModel(model : object,\npregenerated : IEnumerable<string>) : void
- BuildError(errors : IEnumerable<string>) : string
}

class MatchRegistry{
- repository : IMatchRepository
- matchGenerator : MatchGenerator
+ MatchRegistry(repository : IMatchRepository)
+ GetByID(id : int) : Match?
+ GetMatches(tournamentID : int) : IList<Match>
+ GenerateMatches(tournament : Tournament,\ncontestants : IEnumerable<Contestant>) : bool
+ CheckCanGenerate(tournamentID : int,\nsystem : TournamentSystem) : bool
+ SaveMatch(match : Match) : void
}

class TournamentRegistry{
- repository : ITournamentRepository
- tournaments : Dictionary<int, Tournament>
+ TournamentRegistry(repository : ITournamentRepository)
+ LoadTournaments() : void
+ GetAll(refresh : bool) : IList<Tournament>
+ GetByID(id : int) : Tournament
+ CreateTournament(tournament : Tournament) : bool
+ UpdateTournament(tournament : Tournament) : bool
+ DeleteTournament(id : int) : bool
+ GetActiveTournaments() : IEnumerable<Tournament>
+ GetLeaderboard(tournamentID : int) : IList<Contestant>
- CalculateRankings(contestants : IList<Contestants>) : void
- InstantiateTournament(dto : TournamentDTO) : Tournament
- InstantiateDTO(obj : Tournament) : TournamentDTO
- AddToDictionary(tournament : Tournament) : bool
- ValidateModel(Tournament model) : void
}

class UserRegistry{
- repository : IUserRepository
- encryptor : Encryptor
+ UserRegistry(repository : IUserRepository)
+ GetByID(id : int) : Account?
+ RegisterAccount(account Account) : bool
}

class ContestantRegistry{
- repository : IContestantRepository
+ ContestantRegistry(repository : IContestantRepository)
+ GetContestant(tournamentID : int, contestantID : int) : Contestant?
+ GetContestants(tournamentID : int) : IList<Contestant>
+ Register(userID : int, userType : string, tournamentID : int) : bool
+ Deregister(userID : int, tournamentID : int) : bool
+ SaveResults(tournamentID : int\nwinnerID : int, loserID : int) : bool
}

class LoginHandler{
- repository : ILoginRepository
- encryptor : Encryptor
+ LoginHandler(repository : ILoginRepository)
+ AuthenticateForm(creds : Credentials) : Account
+ AuthenticateWebsite(creds : Credentials) : Account
+ VerifyCredential(email : string, password : string) : Account
}

IMatchRepository <--- MatchRegistry 
IMatchRepository <-- MatchGenerator
IUserRepository <--- UserRegistry
IContestantRepository <--- ContestantRegistry  
ITournamentRepository <--- TournamentRegistry
ILoginRepository <--- LoginHandler

BaseRegistry <|.. MatchRegistry 
BaseRegistry <|.. TournamentRegistry 
BaseRegistry <|.. UserRegistry 
BaseRegistry <|.. ContestantRegistry 

LoginHandler --> Encryptor : reference
UserRegistry --> Encryptor : reference
MatchRegistry --> MatchGenerator : reference

BaseRepository --> DbContext 

enum TournamentSystem{
RoundRobin,
SingleElimination
}

enum TournamentStatus{
Planned,
Running,
Finished,
Cancelled
}

enum UserRoles{
Player,
Staff,
Administrator
}

enum TeamType{
Solo,
Team
}

class DbContext{
+ DbConnectionString { get; }
+ DbContext()
+ DbContext(server : string?, uid : string?,\ndatabase: string?, pwd : string?)
}

class Match{
+ ID { get; set; } : int
+ TournamentID { get; set; } : int
+ HomeID { get; set; } : int
+ HomeName { get; set; } : string?
+ HomeScore { get; set; } : int
+ AwayID { get; set; } : int
+ AwayName { get; set; } : string?
+ AwayScore { get; set; } : int
+ IsFinished { get; set; } : bool
+ GetWinner() : int
+ GetLoser() : int
}

class Tournament{
+ ID { get; set; } : int
+ Title { get; set; } : string?
+ Description { get; set; } : string?
+ Sport { get; set; } : ISport?
+ City { get; set; } : string?
+ Address { get; set; } : string?
+ MinContestants { get; set; } : int
+ MaxContestants { get; set; } : int
+ StartDate { get; set; } : DateTime
+ EndDate { get; set; } : DateTime
+ Status { get; set; } : TournamentStatus
+ System { get; set; } : TournamentSystem 
+ Type { get; set; } : TeamType
+ CanStart(totalContestants : int) : bool
}

abstract class Person{
+ ID { get; set; } : int
+ Name { get; set; } : string?
+ SurName { get; set; } : string?
}

class Account{
+ Role { get; set; } : UserRole
+ Type { get; set; } : TeamType
+ Email { get; set; } : string?
+ Password { get; set; } : string?
+ Salt { get; set; } : string?
}

class Contestant {
+ TournamentID { get; set; } : int
+ Rank { get; set; } : int
+ Wins { get; set; } : int
+ Losses { get; set; } : int
+ CompareTo(other : Contestant?) : int
}

class Credentials {
+ Email { get; set; } : string?
+ Password { get; set; } : string?
}

interface ISport{
+ Name { get; } : string
+ Scoring { get; } : string
+ MaxScore { get; } : int
+ ScoreIsValid(object home, object away) : bool
+ ToString() : string
}

class Badminton{
+ Name { get; } : string
+ Scoring { get; } : string
+ MaxScoring { get; } : int
+ Badminton()
+ ScoreIsValid(object home, object away) : bool
+ ToString() : string
}

MatchRegistry --> Match
TournamentRegistry --> Tournament
ContestantRegistry --> Contestant
UserRegistry --> Account
LoginHandler --> Credentials

Contestant --|> Person : inherits
Account --|> Person : inherits
Account ..> UserRoles
Account ..> TeamType
Tournament ..> TeamType

Tournament --> ISport
SportAssigner --> ISport
Tournament ..> TournamentSystem
Tournament ..> TournamentStatus
Contestant ..|> IComparable : implements

interface IComparable<T>{
}

BaseRegistry --> Validate
ContestantRegistry --> Validate
Validate <-- Badminton 
TournamentRegistry --> SportAssigner

ISport <|.. Badminton : implements

SportAssigner -[hidden]> Tournament
ContestantRegistry -[hidden]> UserRegistry 
MatchRegistry -[hidden]> ContestantRegistry
ISport -[hidden]> TournamentStatus
TournamentSystem -[hidden]> TeamType 

TournamentDTO .. Tournament
note right on link
Object shares 
the same 
properties
end note

MatchDTO . Match 
note right on link
Object shares 
the same 
properties
end note

AccountDTO .. Account 
note left on link
Object shares
the same
properties
end note

ContestantDTO .. Contestant
note right on link
Object shares 
the same
properties
end note

TournamentRepository --> TournamentDTO
TournamentRepository  --> ContestantDTO
MatchRepository --> MatchDTO
ContestantRepository --> ContestantDTO
ContestantRepository --> TournamentDTO
UserRepository --> AccountDTO

@enduml